// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  place: (where?: PlaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  place: (where: PlaceWhereUniqueInput) => PlaceNullablePromise;
  places: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Place>;
  placesConnection: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlace: (data: PlaceCreateInput) => PlacePromise;
  updatePlace: (args: {
    data: PlaceUpdateInput;
    where: PlaceWhereUniqueInput;
  }) => PlacePromise;
  updateManyPlaces: (args: {
    data: PlaceUpdateManyMutationInput;
    where?: PlaceWhereInput;
  }) => BatchPayloadPromise;
  upsertPlace: (args: {
    where: PlaceWhereUniqueInput;
    create: PlaceCreateInput;
    update: PlaceUpdateInput;
  }) => PlacePromise;
  deletePlace: (where: PlaceWhereUniqueInput) => PlacePromise;
  deleteManyPlaces: (where?: PlaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  place: (
    where?: PlaceSubscriptionWhereInput
  ) => PlaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortDescription_ASC"
  | "shortDescription_DESC"
  | "description_ASC"
  | "description_DESC"
  | "numBeds_ASC"
  | "numBeds_DESC"
  | "price_ASC"
  | "price_DESC";

export type UserType = "GUEST" | "HOST";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "isHost_ASC"
  | "isHost_DESC"
  | "isSuperHost_ASC"
  | "isSuperHost_DESC"
  | "currentUserType_ASC"
  | "currentUserType_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortDescription?: Maybe<String>;
  shortDescription_not?: Maybe<String>;
  shortDescription_in?: Maybe<String[] | String>;
  shortDescription_not_in?: Maybe<String[] | String>;
  shortDescription_lt?: Maybe<String>;
  shortDescription_lte?: Maybe<String>;
  shortDescription_gt?: Maybe<String>;
  shortDescription_gte?: Maybe<String>;
  shortDescription_contains?: Maybe<String>;
  shortDescription_not_contains?: Maybe<String>;
  shortDescription_starts_with?: Maybe<String>;
  shortDescription_not_starts_with?: Maybe<String>;
  shortDescription_ends_with?: Maybe<String>;
  shortDescription_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  numBeds?: Maybe<Int>;
  numBeds_not?: Maybe<Int>;
  numBeds_in?: Maybe<Int[] | Int>;
  numBeds_not_in?: Maybe<Int[] | Int>;
  numBeds_lt?: Maybe<Int>;
  numBeds_lte?: Maybe<Int>;
  numBeds_gt?: Maybe<Int>;
  numBeds_gte?: Maybe<Int>;
  amenities?: Maybe<AmenitiesWhereInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  AND?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
}

export interface AmenitiesWhereInput {
  elevator?: Maybe<Boolean>;
  elevator_not?: Maybe<Boolean>;
  petsAllowed?: Maybe<Boolean>;
  petsAllowed_not?: Maybe<Boolean>;
  internet?: Maybe<Boolean>;
  internet_not?: Maybe<Boolean>;
  kitchen?: Maybe<Boolean>;
  kitchen_not?: Maybe<Boolean>;
  wirelessInternet?: Maybe<Boolean>;
  wirelessInternet_not?: Maybe<Boolean>;
  familyKidFriendly?: Maybe<Boolean>;
  familyKidFriendly_not?: Maybe<Boolean>;
  freeParkingOnPremises?: Maybe<Boolean>;
  freeParkingOnPremises_not?: Maybe<Boolean>;
  hotTub?: Maybe<Boolean>;
  hotTub_not?: Maybe<Boolean>;
  pool?: Maybe<Boolean>;
  pool_not?: Maybe<Boolean>;
  smokingAllowed?: Maybe<Boolean>;
  smokingAllowed_not?: Maybe<Boolean>;
  wheelchairAccessible?: Maybe<Boolean>;
  wheelchairAccessible_not?: Maybe<Boolean>;
  breakfast?: Maybe<Boolean>;
  breakfast_not?: Maybe<Boolean>;
  cableTv?: Maybe<Boolean>;
  cableTv_not?: Maybe<Boolean>;
  suitableForEvents?: Maybe<Boolean>;
  suitableForEvents_not?: Maybe<Boolean>;
  dryer?: Maybe<Boolean>;
  dryer_not?: Maybe<Boolean>;
  washer?: Maybe<Boolean>;
  washer_not?: Maybe<Boolean>;
  indoorFireplace?: Maybe<Boolean>;
  indoorFireplace_not?: Maybe<Boolean>;
  tv?: Maybe<Boolean>;
  tv_not?: Maybe<Boolean>;
  heating?: Maybe<Boolean>;
  heating_not?: Maybe<Boolean>;
  hangers?: Maybe<Boolean>;
  hangers_not?: Maybe<Boolean>;
  iron?: Maybe<Boolean>;
  iron_not?: Maybe<Boolean>;
  hairDryer?: Maybe<Boolean>;
  hairDryer_not?: Maybe<Boolean>;
  doorman?: Maybe<Boolean>;
  doorman_not?: Maybe<Boolean>;
  paidParkingOffPremises?: Maybe<Boolean>;
  paidParkingOffPremises_not?: Maybe<Boolean>;
  freeParkingOnStreet?: Maybe<Boolean>;
  freeParkingOnStreet_not?: Maybe<Boolean>;
  gym?: Maybe<Boolean>;
  gym_not?: Maybe<Boolean>;
  airConditioning?: Maybe<Boolean>;
  airConditioning_not?: Maybe<Boolean>;
  shampoo?: Maybe<Boolean>;
  shampoo_not?: Maybe<Boolean>;
  essentials?: Maybe<Boolean>;
  essentials_not?: Maybe<Boolean>;
  laptopFriendlyWorkspace?: Maybe<Boolean>;
  laptopFriendlyWorkspace_not?: Maybe<Boolean>;
  privateEntrance?: Maybe<Boolean>;
  privateEntrance_not?: Maybe<Boolean>;
  buzzerWirelessIntercom?: Maybe<Boolean>;
  buzzerWirelessIntercom_not?: Maybe<Boolean>;
  babyBath?: Maybe<Boolean>;
  babyBath_not?: Maybe<Boolean>;
  babyMonitor?: Maybe<Boolean>;
  babyMonitor_not?: Maybe<Boolean>;
  babysitterRecommendations?: Maybe<Boolean>;
  babysitterRecommendations_not?: Maybe<Boolean>;
  bathtub?: Maybe<Boolean>;
  bathtub_not?: Maybe<Boolean>;
  changingTable?: Maybe<Boolean>;
  changingTable_not?: Maybe<Boolean>;
  childrensBooksAndToys?: Maybe<Boolean>;
  childrensBooksAndToys_not?: Maybe<Boolean>;
  childrensDinnerware?: Maybe<Boolean>;
  childrensDinnerware_not?: Maybe<Boolean>;
  crib?: Maybe<Boolean>;
  crib_not?: Maybe<Boolean>;
  AND?: Maybe<AmenitiesWhereInput[] | AmenitiesWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  isHost?: Maybe<Boolean>;
  isHost_not?: Maybe<Boolean>;
  isSuperHost?: Maybe<Boolean>;
  isSuperHost_not?: Maybe<Boolean>;
  currentUserType?: Maybe<UserType>;
  currentUserType_not?: Maybe<UserType>;
  currentUserType_in?: Maybe<UserType[] | UserType>;
  currentUserType_not_in?: Maybe<UserType[] | UserType>;
  userLocation?: Maybe<UserLocationWhereInput>;
  profilePicture?: Maybe<PictureWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserLocationWhereInput {
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  AND?: Maybe<UserLocationWhereInput[] | UserLocationWhereInput>;
}

export interface PictureWhereInput {
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  AND?: Maybe<PictureWhereInput[] | PictureWhereInput>;
}

export interface PlaceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  shortDescription: String;
  description: String;
  numBeds: Int;
  amenities: AmenitiesCreateOneInput;
  price: Int;
  tags?: Maybe<PlaceCreatetagsInput>;
}

export interface AmenitiesCreateOneInput {
  create?: Maybe<AmenitiesCreateInput>;
}

export interface AmenitiesCreateInput {
  elevator?: Maybe<Boolean>;
  petsAllowed?: Maybe<Boolean>;
  internet?: Maybe<Boolean>;
  kitchen?: Maybe<Boolean>;
  wirelessInternet?: Maybe<Boolean>;
  familyKidFriendly?: Maybe<Boolean>;
  freeParkingOnPremises?: Maybe<Boolean>;
  hotTub?: Maybe<Boolean>;
  pool?: Maybe<Boolean>;
  smokingAllowed?: Maybe<Boolean>;
  wheelchairAccessible?: Maybe<Boolean>;
  breakfast?: Maybe<Boolean>;
  cableTv?: Maybe<Boolean>;
  suitableForEvents?: Maybe<Boolean>;
  dryer?: Maybe<Boolean>;
  washer?: Maybe<Boolean>;
  indoorFireplace?: Maybe<Boolean>;
  tv?: Maybe<Boolean>;
  heating?: Maybe<Boolean>;
  hangers?: Maybe<Boolean>;
  iron?: Maybe<Boolean>;
  hairDryer?: Maybe<Boolean>;
  doorman?: Maybe<Boolean>;
  paidParkingOffPremises?: Maybe<Boolean>;
  freeParkingOnStreet?: Maybe<Boolean>;
  gym?: Maybe<Boolean>;
  airConditioning?: Maybe<Boolean>;
  shampoo?: Maybe<Boolean>;
  essentials?: Maybe<Boolean>;
  laptopFriendlyWorkspace?: Maybe<Boolean>;
  privateEntrance?: Maybe<Boolean>;
  buzzerWirelessIntercom?: Maybe<Boolean>;
  babyBath?: Maybe<Boolean>;
  babyMonitor?: Maybe<Boolean>;
  babysitterRecommendations?: Maybe<Boolean>;
  bathtub?: Maybe<Boolean>;
  changingTable?: Maybe<Boolean>;
  childrensBooksAndToys?: Maybe<Boolean>;
  childrensDinnerware?: Maybe<Boolean>;
  crib?: Maybe<Boolean>;
}

export interface PlaceCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface PlaceUpdateInput {
  name?: Maybe<String>;
  shortDescription?: Maybe<String>;
  description?: Maybe<String>;
  numBeds?: Maybe<Int>;
  amenities?: Maybe<AmenitiesUpdateOneRequiredInput>;
  price?: Maybe<Int>;
  tags?: Maybe<PlaceUpdatetagsInput>;
}

export interface AmenitiesUpdateOneRequiredInput {
  create?: Maybe<AmenitiesCreateInput>;
  update?: Maybe<AmenitiesUpdateDataInput>;
  upsert?: Maybe<AmenitiesUpsertNestedInput>;
}

export interface AmenitiesUpdateDataInput {
  elevator?: Maybe<Boolean>;
  petsAllowed?: Maybe<Boolean>;
  internet?: Maybe<Boolean>;
  kitchen?: Maybe<Boolean>;
  wirelessInternet?: Maybe<Boolean>;
  familyKidFriendly?: Maybe<Boolean>;
  freeParkingOnPremises?: Maybe<Boolean>;
  hotTub?: Maybe<Boolean>;
  pool?: Maybe<Boolean>;
  smokingAllowed?: Maybe<Boolean>;
  wheelchairAccessible?: Maybe<Boolean>;
  breakfast?: Maybe<Boolean>;
  cableTv?: Maybe<Boolean>;
  suitableForEvents?: Maybe<Boolean>;
  dryer?: Maybe<Boolean>;
  washer?: Maybe<Boolean>;
  indoorFireplace?: Maybe<Boolean>;
  tv?: Maybe<Boolean>;
  heating?: Maybe<Boolean>;
  hangers?: Maybe<Boolean>;
  iron?: Maybe<Boolean>;
  hairDryer?: Maybe<Boolean>;
  doorman?: Maybe<Boolean>;
  paidParkingOffPremises?: Maybe<Boolean>;
  freeParkingOnStreet?: Maybe<Boolean>;
  gym?: Maybe<Boolean>;
  airConditioning?: Maybe<Boolean>;
  shampoo?: Maybe<Boolean>;
  essentials?: Maybe<Boolean>;
  laptopFriendlyWorkspace?: Maybe<Boolean>;
  privateEntrance?: Maybe<Boolean>;
  buzzerWirelessIntercom?: Maybe<Boolean>;
  babyBath?: Maybe<Boolean>;
  babyMonitor?: Maybe<Boolean>;
  babysitterRecommendations?: Maybe<Boolean>;
  bathtub?: Maybe<Boolean>;
  changingTable?: Maybe<Boolean>;
  childrensBooksAndToys?: Maybe<Boolean>;
  childrensDinnerware?: Maybe<Boolean>;
  crib?: Maybe<Boolean>;
}

export interface AmenitiesUpsertNestedInput {
  update: AmenitiesUpdateDataInput;
  create: AmenitiesCreateInput;
}

export interface PlaceUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface PlaceUpdateManyMutationInput {
  name?: Maybe<String>;
  shortDescription?: Maybe<String>;
  description?: Maybe<String>;
  numBeds?: Maybe<Int>;
  price?: Maybe<Int>;
  tags?: Maybe<PlaceUpdatetagsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  email: String;
  password: String;
  phone?: Maybe<String>;
  isHost?: Maybe<Boolean>;
  isSuperHost?: Maybe<Boolean>;
  currentUserType?: Maybe<UserType>;
  userLocation?: Maybe<UserLocationCreateOneInput>;
  profilePicture?: Maybe<PictureCreateOneInput>;
}

export interface UserLocationCreateOneInput {
  create?: Maybe<UserLocationCreateInput>;
}

export interface UserLocationCreateInput {
  type?: Maybe<String>;
  coordinates?: Maybe<UserLocationCreatecoordinatesInput>;
  latitude: Float;
  longitude: Float;
}

export interface UserLocationCreatecoordinatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface PictureCreateOneInput {
  create?: Maybe<PictureCreateInput>;
}

export interface PictureCreateInput {
  url: String;
  mimetype: String;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  isHost?: Maybe<Boolean>;
  isSuperHost?: Maybe<Boolean>;
  currentUserType?: Maybe<UserType>;
  userLocation?: Maybe<UserLocationUpdateOneInput>;
  profilePicture?: Maybe<PictureUpdateOneInput>;
}

export interface UserLocationUpdateOneInput {
  create?: Maybe<UserLocationCreateInput>;
  update?: Maybe<UserLocationUpdateDataInput>;
  upsert?: Maybe<UserLocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
}

export interface UserLocationUpdateDataInput {
  type?: Maybe<String>;
  coordinates?: Maybe<UserLocationUpdatecoordinatesInput>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface UserLocationUpdatecoordinatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface UserLocationUpsertNestedInput {
  update: UserLocationUpdateDataInput;
  create: UserLocationCreateInput;
}

export interface PictureUpdateOneInput {
  create?: Maybe<PictureCreateInput>;
  update?: Maybe<PictureUpdateDataInput>;
  upsert?: Maybe<PictureUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
}

export interface PictureUpdateDataInput {
  url?: Maybe<String>;
  mimetype?: Maybe<String>;
}

export interface PictureUpsertNestedInput {
  update: PictureUpdateDataInput;
  create: PictureCreateInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  isHost?: Maybe<Boolean>;
  isSuperHost?: Maybe<Boolean>;
  currentUserType?: Maybe<UserType>;
}

export interface PlaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaceWhereInput>;
  AND?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Place {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  shortDescription: String;
  description: String;
  numBeds: Int;
  amenities: Amenities;
  price: Int;
  tags: String[];
}

export interface PlacePromise extends Promise<Place>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  shortDescription: () => Promise<String>;
  description: () => Promise<String>;
  numBeds: () => Promise<Int>;
  amenities: <T = AmenitiesPromise>() => T;
  price: () => Promise<Int>;
  tags: () => Promise<String[]>;
}

export interface PlaceSubscription
  extends Promise<AsyncIterator<Place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  shortDescription: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  numBeds: () => Promise<AsyncIterator<Int>>;
  amenities: <T = AmenitiesSubscription>() => T;
  price: () => Promise<AsyncIterator<Int>>;
  tags: () => Promise<AsyncIterator<String[]>>;
}

export interface PlaceNullablePromise
  extends Promise<Place | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  shortDescription: () => Promise<String>;
  description: () => Promise<String>;
  numBeds: () => Promise<Int>;
  amenities: <T = AmenitiesPromise>() => T;
  price: () => Promise<Int>;
  tags: () => Promise<String[]>;
}

export interface Amenities {
  elevator: Boolean;
  petsAllowed: Boolean;
  internet: Boolean;
  kitchen: Boolean;
  wirelessInternet: Boolean;
  familyKidFriendly: Boolean;
  freeParkingOnPremises: Boolean;
  hotTub: Boolean;
  pool: Boolean;
  smokingAllowed: Boolean;
  wheelchairAccessible: Boolean;
  breakfast: Boolean;
  cableTv: Boolean;
  suitableForEvents: Boolean;
  dryer: Boolean;
  washer: Boolean;
  indoorFireplace: Boolean;
  tv: Boolean;
  heating: Boolean;
  hangers: Boolean;
  iron: Boolean;
  hairDryer: Boolean;
  doorman: Boolean;
  paidParkingOffPremises: Boolean;
  freeParkingOnStreet: Boolean;
  gym: Boolean;
  airConditioning: Boolean;
  shampoo: Boolean;
  essentials: Boolean;
  laptopFriendlyWorkspace: Boolean;
  privateEntrance: Boolean;
  buzzerWirelessIntercom: Boolean;
  babyBath: Boolean;
  babyMonitor: Boolean;
  babysitterRecommendations: Boolean;
  bathtub: Boolean;
  changingTable: Boolean;
  childrensBooksAndToys: Boolean;
  childrensDinnerware: Boolean;
  crib: Boolean;
}

export interface AmenitiesPromise extends Promise<Amenities>, Fragmentable {
  elevator: () => Promise<Boolean>;
  petsAllowed: () => Promise<Boolean>;
  internet: () => Promise<Boolean>;
  kitchen: () => Promise<Boolean>;
  wirelessInternet: () => Promise<Boolean>;
  familyKidFriendly: () => Promise<Boolean>;
  freeParkingOnPremises: () => Promise<Boolean>;
  hotTub: () => Promise<Boolean>;
  pool: () => Promise<Boolean>;
  smokingAllowed: () => Promise<Boolean>;
  wheelchairAccessible: () => Promise<Boolean>;
  breakfast: () => Promise<Boolean>;
  cableTv: () => Promise<Boolean>;
  suitableForEvents: () => Promise<Boolean>;
  dryer: () => Promise<Boolean>;
  washer: () => Promise<Boolean>;
  indoorFireplace: () => Promise<Boolean>;
  tv: () => Promise<Boolean>;
  heating: () => Promise<Boolean>;
  hangers: () => Promise<Boolean>;
  iron: () => Promise<Boolean>;
  hairDryer: () => Promise<Boolean>;
  doorman: () => Promise<Boolean>;
  paidParkingOffPremises: () => Promise<Boolean>;
  freeParkingOnStreet: () => Promise<Boolean>;
  gym: () => Promise<Boolean>;
  airConditioning: () => Promise<Boolean>;
  shampoo: () => Promise<Boolean>;
  essentials: () => Promise<Boolean>;
  laptopFriendlyWorkspace: () => Promise<Boolean>;
  privateEntrance: () => Promise<Boolean>;
  buzzerWirelessIntercom: () => Promise<Boolean>;
  babyBath: () => Promise<Boolean>;
  babyMonitor: () => Promise<Boolean>;
  babysitterRecommendations: () => Promise<Boolean>;
  bathtub: () => Promise<Boolean>;
  changingTable: () => Promise<Boolean>;
  childrensBooksAndToys: () => Promise<Boolean>;
  childrensDinnerware: () => Promise<Boolean>;
  crib: () => Promise<Boolean>;
}

export interface AmenitiesSubscription
  extends Promise<AsyncIterator<Amenities>>,
    Fragmentable {
  elevator: () => Promise<AsyncIterator<Boolean>>;
  petsAllowed: () => Promise<AsyncIterator<Boolean>>;
  internet: () => Promise<AsyncIterator<Boolean>>;
  kitchen: () => Promise<AsyncIterator<Boolean>>;
  wirelessInternet: () => Promise<AsyncIterator<Boolean>>;
  familyKidFriendly: () => Promise<AsyncIterator<Boolean>>;
  freeParkingOnPremises: () => Promise<AsyncIterator<Boolean>>;
  hotTub: () => Promise<AsyncIterator<Boolean>>;
  pool: () => Promise<AsyncIterator<Boolean>>;
  smokingAllowed: () => Promise<AsyncIterator<Boolean>>;
  wheelchairAccessible: () => Promise<AsyncIterator<Boolean>>;
  breakfast: () => Promise<AsyncIterator<Boolean>>;
  cableTv: () => Promise<AsyncIterator<Boolean>>;
  suitableForEvents: () => Promise<AsyncIterator<Boolean>>;
  dryer: () => Promise<AsyncIterator<Boolean>>;
  washer: () => Promise<AsyncIterator<Boolean>>;
  indoorFireplace: () => Promise<AsyncIterator<Boolean>>;
  tv: () => Promise<AsyncIterator<Boolean>>;
  heating: () => Promise<AsyncIterator<Boolean>>;
  hangers: () => Promise<AsyncIterator<Boolean>>;
  iron: () => Promise<AsyncIterator<Boolean>>;
  hairDryer: () => Promise<AsyncIterator<Boolean>>;
  doorman: () => Promise<AsyncIterator<Boolean>>;
  paidParkingOffPremises: () => Promise<AsyncIterator<Boolean>>;
  freeParkingOnStreet: () => Promise<AsyncIterator<Boolean>>;
  gym: () => Promise<AsyncIterator<Boolean>>;
  airConditioning: () => Promise<AsyncIterator<Boolean>>;
  shampoo: () => Promise<AsyncIterator<Boolean>>;
  essentials: () => Promise<AsyncIterator<Boolean>>;
  laptopFriendlyWorkspace: () => Promise<AsyncIterator<Boolean>>;
  privateEntrance: () => Promise<AsyncIterator<Boolean>>;
  buzzerWirelessIntercom: () => Promise<AsyncIterator<Boolean>>;
  babyBath: () => Promise<AsyncIterator<Boolean>>;
  babyMonitor: () => Promise<AsyncIterator<Boolean>>;
  babysitterRecommendations: () => Promise<AsyncIterator<Boolean>>;
  bathtub: () => Promise<AsyncIterator<Boolean>>;
  changingTable: () => Promise<AsyncIterator<Boolean>>;
  childrensBooksAndToys: () => Promise<AsyncIterator<Boolean>>;
  childrensDinnerware: () => Promise<AsyncIterator<Boolean>>;
  crib: () => Promise<AsyncIterator<Boolean>>;
}

export interface AmenitiesNullablePromise
  extends Promise<Amenities | null>,
    Fragmentable {
  elevator: () => Promise<Boolean>;
  petsAllowed: () => Promise<Boolean>;
  internet: () => Promise<Boolean>;
  kitchen: () => Promise<Boolean>;
  wirelessInternet: () => Promise<Boolean>;
  familyKidFriendly: () => Promise<Boolean>;
  freeParkingOnPremises: () => Promise<Boolean>;
  hotTub: () => Promise<Boolean>;
  pool: () => Promise<Boolean>;
  smokingAllowed: () => Promise<Boolean>;
  wheelchairAccessible: () => Promise<Boolean>;
  breakfast: () => Promise<Boolean>;
  cableTv: () => Promise<Boolean>;
  suitableForEvents: () => Promise<Boolean>;
  dryer: () => Promise<Boolean>;
  washer: () => Promise<Boolean>;
  indoorFireplace: () => Promise<Boolean>;
  tv: () => Promise<Boolean>;
  heating: () => Promise<Boolean>;
  hangers: () => Promise<Boolean>;
  iron: () => Promise<Boolean>;
  hairDryer: () => Promise<Boolean>;
  doorman: () => Promise<Boolean>;
  paidParkingOffPremises: () => Promise<Boolean>;
  freeParkingOnStreet: () => Promise<Boolean>;
  gym: () => Promise<Boolean>;
  airConditioning: () => Promise<Boolean>;
  shampoo: () => Promise<Boolean>;
  essentials: () => Promise<Boolean>;
  laptopFriendlyWorkspace: () => Promise<Boolean>;
  privateEntrance: () => Promise<Boolean>;
  buzzerWirelessIntercom: () => Promise<Boolean>;
  babyBath: () => Promise<Boolean>;
  babyMonitor: () => Promise<Boolean>;
  babysitterRecommendations: () => Promise<Boolean>;
  bathtub: () => Promise<Boolean>;
  changingTable: () => Promise<Boolean>;
  childrensBooksAndToys: () => Promise<Boolean>;
  childrensDinnerware: () => Promise<Boolean>;
  crib: () => Promise<Boolean>;
}

export interface PlaceConnection {
  pageInfo: PageInfo;
  edges: PlaceEdge[];
}

export interface PlaceConnectionPromise
  extends Promise<PlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaceEdge>>() => T;
  aggregate: <T = AggregatePlacePromise>() => T;
}

export interface PlaceConnectionSubscription
  extends Promise<AsyncIterator<PlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaceEdge {
  node: Place;
  cursor: String;
}

export interface PlaceEdgePromise extends Promise<PlaceEdge>, Fragmentable {
  node: <T = PlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaceEdgeSubscription
  extends Promise<AsyncIterator<PlaceEdge>>,
    Fragmentable {
  node: <T = PlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlace {
  count: Int;
}

export interface AggregatePlacePromise
  extends Promise<AggregatePlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaceSubscription
  extends Promise<AsyncIterator<AggregatePlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  birthdate?: DateTimeOutput;
  email: String;
  password: String;
  phone?: String;
  isHost: Boolean;
  isSuperHost: Boolean;
  currentUserType: UserType;
  userLocation?: UserLocation | null;
  profilePicture?: Picture | null;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  isHost: () => Promise<Boolean>;
  isSuperHost: () => Promise<Boolean>;
  currentUserType: () => Promise<UserType>;
  userLocation: <T = UserLocationPromise>() => T;
  profilePicture: <T = PicturePromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  isHost: () => Promise<AsyncIterator<Boolean>>;
  isSuperHost: () => Promise<AsyncIterator<Boolean>>;
  currentUserType: () => Promise<AsyncIterator<UserType>>;
  userLocation: <T = UserLocationSubscription>() => T;
  profilePicture: <T = PictureSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  isHost: () => Promise<Boolean>;
  isSuperHost: () => Promise<Boolean>;
  currentUserType: () => Promise<UserType>;
  userLocation: <T = UserLocationPromise>() => T;
  profilePicture: <T = PicturePromise>() => T;
}

export interface UserLocation {
  type: String;
  coordinates: Float[];
  latitude: Float;
  longitude: Float;
}

export interface UserLocationPromise
  extends Promise<UserLocation>,
    Fragmentable {
  type: () => Promise<String>;
  coordinates: () => Promise<Float[]>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface UserLocationSubscription
  extends Promise<AsyncIterator<UserLocation>>,
    Fragmentable {
  type: () => Promise<AsyncIterator<String>>;
  coordinates: () => Promise<AsyncIterator<Float[]>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface UserLocationNullablePromise
  extends Promise<UserLocation | null>,
    Fragmentable {
  type: () => Promise<String>;
  coordinates: () => Promise<Float[]>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface Picture {
  url: String;
  mimetype: String;
}

export interface PicturePromise extends Promise<Picture>, Fragmentable {
  url: () => Promise<String>;
  mimetype: () => Promise<String>;
}

export interface PictureSubscription
  extends Promise<AsyncIterator<Picture>>,
    Fragmentable {
  url: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
}

export interface PictureNullablePromise
  extends Promise<Picture | null>,
    Fragmentable {
  url: () => Promise<String>;
  mimetype: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType;
  node: Place;
  updatedFields: String[];
  previousValues: PlacePreviousValues;
}

export interface PlaceSubscriptionPayloadPromise
  extends Promise<PlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlacePreviousValuesPromise>() => T;
}

export interface PlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlacePreviousValuesSubscription>() => T;
}

export interface PlacePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  shortDescription: String;
  description: String;
  numBeds: Int;
  price: Int;
  tags: String[];
}

export interface PlacePreviousValuesPromise
  extends Promise<PlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  shortDescription: () => Promise<String>;
  description: () => Promise<String>;
  numBeds: () => Promise<Int>;
  price: () => Promise<Int>;
  tags: () => Promise<String[]>;
}

export interface PlacePreviousValuesSubscription
  extends Promise<AsyncIterator<PlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  shortDescription: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  numBeds: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  tags: () => Promise<AsyncIterator<String[]>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  birthdate?: DateTimeOutput;
  email: String;
  password: String;
  phone?: String;
  isHost: Boolean;
  isSuperHost: Boolean;
  currentUserType: UserType;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  isHost: () => Promise<Boolean>;
  isSuperHost: () => Promise<Boolean>;
  currentUserType: () => Promise<UserType>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  isHost: () => Promise<AsyncIterator<Boolean>>;
  isSuperHost: () => Promise<AsyncIterator<Boolean>>;
  currentUserType: () => Promise<AsyncIterator<UserType>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "UserLocation",
    embedded: true
  },
  {
    name: "Picture",
    embedded: true
  },
  {
    name: "Place",
    embedded: false
  },
  {
    name: "Amenities",
    embedded: true
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
