// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Media,
  RegisterResult,
  AuthenticationError,
  LoginResult,
  UpdateMeResult,
  UpdateMeMediaResult,
  ForgotPasswordChangeResult,
  Context
} from "../../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    email: (parent: User) => parent.email,
    media: (parent: User) => (parent.media === undefined ? null : parent.media),
    firstName: (parent: User) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: User) =>
      parent.lastName === undefined ? null : parent.lastName,
    birthdate: (parent: User) =>
      parent.birthdate === undefined ? null : parent.birthdate
  };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MediaResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Media | null | Promise<Media | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Media | null | Promise<Media | null>;
      };

  export type FirstNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type LastNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type BirthdateResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    media:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Media | null | Promise<Media | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Media | null | Promise<Media | null>;
        };

    firstName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    lastName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    birthdate:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace MediaResolvers {
  export const defaultResolvers = {
    mimetype: (parent: Media) => parent.mimetype,
    url: (parent: Media) => parent.url
  };

  export type MimetypeResolver =
    | ((
        parent: Media,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UrlResolver =
    | ((
        parent: Media,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    mimetype:
      | ((
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Media,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    url:
      | ((
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Media,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsRegister {
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsSendForgotPasswordEmail {
    email: string;
  }

  export interface ArgsUpdateMe {
    firstName?: string | null;
    lastName?: string | null;
    birthdate?: string | null;
  }

  export interface ArgsUpdateMeMedia {
    media: string;
  }

  export type RegisterResolver =
    | ((
        parent: undefined,
        args: ArgsRegister,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RegisterResult | Promise<RegisterResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => LoginResult | Promise<LoginResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>;
      };

  export type SendForgotPasswordEmailResolver =
    | ((
        parent: undefined,
        args: ArgsSendForgotPasswordEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSendForgotPasswordEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type ForgotPasswordChangeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export type LogoutResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type UpdateMeResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateMe,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UpdateMeResult | Promise<UpdateMeResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateMe,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeResult | Promise<UpdateMeResult>;
      };

  export type UpdateMeMediaResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateMeMedia,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateMeMedia,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>;
      };

  export interface Type {
    register:
      | ((
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRegister,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RegisterResult | Promise<RegisterResult>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => LoginResult | Promise<LoginResult>;
        };

    sendForgotPasswordEmail:
      | ((
          parent: undefined,
          args: ArgsSendForgotPasswordEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSendForgotPasswordEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    forgotPasswordChange:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };

    logout:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    updateMe:
      | ((
          parent: undefined,
          args: ArgsUpdateMe,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeResult | Promise<UpdateMeResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateMe,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UpdateMeResult | Promise<UpdateMeResult>;
        };

    updateMeMedia:
      | ((
          parent: undefined,
          args: ArgsUpdateMeMedia,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateMeMedia,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>;
        };
  }
}

export namespace RegisterResultResolvers {
  export const defaultResolvers = {
    me: (parent: RegisterResult) =>
      parent.me === undefined ? null : parent.me,
    token: (parent: RegisterResult) =>
      parent.token === undefined ? null : parent.token,
    errors: (parent: RegisterResult) => parent.errors
  };

  export type MeResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type TokenResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ErrorsResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    me:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    token:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    errors:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export namespace AuthenticationErrorResolvers {
  export const defaultResolvers = {
    path: (parent: AuthenticationError) => parent.path,
    message: (parent: AuthenticationError) => parent.message
  };

  export type PathResolver =
    | ((
        parent: AuthenticationError,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MessageResolver =
    | ((
        parent: AuthenticationError,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    path:
      | ((
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthenticationError,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    message:
      | ((
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthenticationError,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace LoginResultResolvers {
  export const defaultResolvers = {
    me: (parent: LoginResult) => (parent.me === undefined ? null : parent.me),
    token: (parent: LoginResult) =>
      parent.token === undefined ? null : parent.token,
    errors: (parent: LoginResult) => parent.errors
  };

  export type MeResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type TokenResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ErrorsResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    me:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    token:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    errors:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export namespace UpdateMeResultResolvers {
  export const defaultResolvers = {
    me: (parent: UpdateMeResult) => parent.me,
    token: (parent: UpdateMeResult) => parent.token
  };

  export type MeResolver =
    | ((
        parent: UpdateMeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type TokenResolver =
    | ((
        parent: UpdateMeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    me:
      | ((
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    token:
      | ((
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace UpdateMeMediaResultResolvers {
  export const defaultResolvers = {
    me: (parent: UpdateMeMediaResult) => parent.me,
    token: (parent: UpdateMeMediaResult) => parent.token
  };

  export type MeResolver =
    | ((
        parent: UpdateMeMediaResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type TokenResolver =
    | ((
        parent: UpdateMeMediaResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    me:
      | ((
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeMediaResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    token:
      | ((
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeMediaResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace ForgotPasswordChangeResultResolvers {
  export const defaultResolvers = {
    errors: (parent: ForgotPasswordChangeResult) => parent.errors
  };

  export type ErrorsResolver =
    | ((
        parent: ForgotPasswordChangeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: ForgotPasswordChangeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    errors:
      | ((
          parent: ForgotPasswordChangeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: ForgotPasswordChangeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Media: MediaResolvers.Type;
  Mutation: MutationResolvers.Type;
  RegisterResult: RegisterResultResolvers.Type;
  AuthenticationError: AuthenticationErrorResolvers.Type;
  LoginResult: LoginResultResolvers.Type;
  UpdateMeResult: UpdateMeResultResolvers.Type;
  UpdateMeMediaResult: UpdateMeMediaResultResolvers.Type;
  ForgotPasswordChangeResult: ForgotPasswordChangeResultResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
