// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Media,
  MockUser,
  RegisterResult,
  AuthenticationError,
  LoginResult,
  UpdateMeResult,
  UpdateMeMediaResult,
  CreatePlaceResult,
  Place,
  Amenities,
  ForgotPasswordChangeResult,
  Context
} from "../../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUsers {
    page: number;
    limit: number;
  }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UsersResolver =
    | ((
        parent: undefined,
        args: ArgsUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MockUser[] | Promise<MockUser[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MockUser[] | Promise<MockUser[]>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    users:
      | ((
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MockUser[] | Promise<MockUser[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MockUser[] | Promise<MockUser[]>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    email: (parent: User) => parent.email,
    media: (parent: User) => (parent.media === undefined ? null : parent.media),
    firstName: (parent: User) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: User) =>
      parent.lastName === undefined ? null : parent.lastName,
    birthdate: (parent: User) =>
      parent.birthdate === undefined ? null : parent.birthdate
  };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MediaResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Media | null | Promise<Media | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Media | null | Promise<Media | null>;
      };

  export type FirstNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type LastNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type BirthdateResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    media:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Media | null | Promise<Media | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Media | null | Promise<Media | null>;
        };

    firstName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    lastName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    birthdate:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace MediaResolvers {
  export const defaultResolvers = {
    mimetype: (parent: Media) => parent.mimetype,
    url: (parent: Media) => parent.url
  };

  export type MimetypeResolver =
    | ((
        parent: Media,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UrlResolver =
    | ((
        parent: Media,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    mimetype:
      | ((
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Media,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    url:
      | ((
          parent: Media,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Media,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace MockUserResolvers {
  export const defaultResolvers = {
    id: (parent: MockUser) => parent.id,
    first_name: (parent: MockUser) => parent.first_name,
    last_name: (parent: MockUser) => parent.last_name,
    email: (parent: MockUser) => parent.email,
    gender: (parent: MockUser) => parent.gender,
    company: (parent: MockUser) => parent.company,
    bio: (parent: MockUser) => parent.bio
  };

  export type IdResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type First_nameResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Last_nameResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type GenderResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CompanyResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type BioResolver =
    | ((
        parent: MockUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    first_name:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    last_name:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    gender:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    company:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    bio:
      | ((
          parent: MockUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: MockUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreatePlaceInput {
    name: string;
    shortDescription: string;
    description: string;
    numBeds: number;
    price: number;
    tags: string[];
    amenities: CreateAmenitiesInput;
  }
  export interface CreateAmenitiesInput {
    elevator: boolean;
    petsAllowed: boolean;
    internet: boolean;
    kitchen: boolean;
    wirelessInternet: boolean;
    familyKidFriendly: boolean;
    freeParkingOnPremises: boolean;
    hotTub: boolean;
    pool: boolean;
    smokingAllowed: boolean;
    wheelchairAccessible: boolean;
    breakfast: boolean;
    cableTv: boolean;
    suitableForEvents: boolean;
    dryer: boolean;
    washer: boolean;
    indoorFireplace: boolean;
    tv: boolean;
    heating: boolean;
    hangers: boolean;
    iron: boolean;
    hairDryer: boolean;
    doorman: boolean;
    paidParkingOffPremises: boolean;
    freeParkingOnStreet: boolean;
    gym: boolean;
    airConditioning: boolean;
    shampoo: boolean;
    essentials: boolean;
    laptopFriendlyWorkspace: boolean;
    privateEntrance: boolean;
    buzzerWirelessIntercom: boolean;
    babyBath: boolean;
    babyMonitor: boolean;
    babysitterRecommendations: boolean;
    bathtub: boolean;
    changingTable: boolean;
    childrensBooksAndToys: boolean;
    childrensDinnerware: boolean;
    crib: boolean;
  }

  export interface ArgsRegister {
    email: string;
    password: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsSendForgotPasswordEmail {
    email: string;
  }

  export interface ArgsUpdateMe {
    firstName?: string | null;
    lastName?: string | null;
    birthdate?: string | null;
  }

  export interface ArgsUpdateMeMedia {
    media: string;
  }

  export interface ArgsCreatePlace {
    input: CreatePlaceInput;
  }

  export type RegisterResolver =
    | ((
        parent: undefined,
        args: ArgsRegister,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RegisterResult | Promise<RegisterResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => LoginResult | Promise<LoginResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>;
      };

  export type SendForgotPasswordEmailResolver =
    | ((
        parent: undefined,
        args: ArgsSendForgotPasswordEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSendForgotPasswordEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type ForgotPasswordChangeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export type LogoutResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type UpdateMeResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateMe,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UpdateMeResult | Promise<UpdateMeResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateMe,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeResult | Promise<UpdateMeResult>;
      };

  export type UpdateMeMediaResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateMeMedia,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateMeMedia,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>;
      };

  export type CreatePlaceResolver =
    | ((
        parent: undefined,
        args: ArgsCreatePlace,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CreatePlaceResult | Promise<CreatePlaceResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreatePlace,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CreatePlaceResult | Promise<CreatePlaceResult>;
      };

  export interface Type {
    register:
      | ((
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRegister,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RegisterResult | Promise<RegisterResult>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => LoginResult | Promise<LoginResult>;
        };

    sendForgotPasswordEmail:
      | ((
          parent: undefined,
          args: ArgsSendForgotPasswordEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSendForgotPasswordEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    forgotPasswordChange:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };

    logout:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    updateMe:
      | ((
          parent: undefined,
          args: ArgsUpdateMe,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeResult | Promise<UpdateMeResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateMe,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UpdateMeResult | Promise<UpdateMeResult>;
        };

    updateMeMedia:
      | ((
          parent: undefined,
          args: ArgsUpdateMeMedia,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateMeMedia,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UpdateMeMediaResult | Promise<UpdateMeMediaResult>;
        };

    createPlace:
      | ((
          parent: undefined,
          args: ArgsCreatePlace,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CreatePlaceResult | Promise<CreatePlaceResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreatePlace,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CreatePlaceResult | Promise<CreatePlaceResult>;
        };
  }
}

export namespace RegisterResultResolvers {
  export const defaultResolvers = {
    me: (parent: RegisterResult) =>
      parent.me === undefined ? null : parent.me,
    token: (parent: RegisterResult) =>
      parent.token === undefined ? null : parent.token,
    errors: (parent: RegisterResult) => parent.errors
  };

  export type MeResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type TokenResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ErrorsResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    me:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    token:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    errors:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export namespace AuthenticationErrorResolvers {
  export const defaultResolvers = {
    path: (parent: AuthenticationError) => parent.path,
    message: (parent: AuthenticationError) => parent.message
  };

  export type PathResolver =
    | ((
        parent: AuthenticationError,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MessageResolver =
    | ((
        parent: AuthenticationError,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    path:
      | ((
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthenticationError,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    message:
      | ((
          parent: AuthenticationError,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthenticationError,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace LoginResultResolvers {
  export const defaultResolvers = {
    me: (parent: LoginResult) => (parent.me === undefined ? null : parent.me),
    token: (parent: LoginResult) =>
      parent.token === undefined ? null : parent.token,
    errors: (parent: LoginResult) => parent.errors
  };

  export type MeResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type TokenResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ErrorsResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    me:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    token:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    errors:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export namespace UpdateMeResultResolvers {
  export const defaultResolvers = {
    me: (parent: UpdateMeResult) => parent.me,
    token: (parent: UpdateMeResult) => parent.token
  };

  export type MeResolver =
    | ((
        parent: UpdateMeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type TokenResolver =
    | ((
        parent: UpdateMeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    me:
      | ((
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    token:
      | ((
          parent: UpdateMeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace UpdateMeMediaResultResolvers {
  export const defaultResolvers = {
    me: (parent: UpdateMeMediaResult) => parent.me,
    token: (parent: UpdateMeMediaResult) => parent.token
  };

  export type MeResolver =
    | ((
        parent: UpdateMeMediaResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type TokenResolver =
    | ((
        parent: UpdateMeMediaResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    me:
      | ((
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeMediaResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    token:
      | ((
          parent: UpdateMeMediaResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UpdateMeMediaResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace CreatePlaceResultResolvers {
  export const defaultResolvers = {
    place: (parent: CreatePlaceResult) => parent.place
  };

  export type PlaceResolver =
    | ((
        parent: CreatePlaceResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Place | Promise<Place>)
    | {
        fragment: string;
        resolve: (
          parent: CreatePlaceResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Place | Promise<Place>;
      };

  export interface Type {
    place:
      | ((
          parent: CreatePlaceResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Place | Promise<Place>)
      | {
          fragment: string;
          resolve: (
            parent: CreatePlaceResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Place | Promise<Place>;
        };
  }
}

export namespace PlaceResolvers {
  export const defaultResolvers = {
    id: (parent: Place) => parent.id,
    createdAt: (parent: Place) => parent.createdAt,
    updatedAt: (parent: Place) => parent.updatedAt,
    name: (parent: Place) => parent.name,
    shortDescription: (parent: Place) => parent.shortDescription,
    description: (parent: Place) => parent.description,
    numBeds: (parent: Place) => parent.numBeds,
    price: (parent: Place) => parent.price,
    amenities: (parent: Place) => parent.amenities,
    tags: (parent: Place) => parent.tags
  };

  export type IdResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ShortDescriptionResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type DescriptionResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NumBedsResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type AmenitiesResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Amenities | Promise<Amenities>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Amenities | Promise<Amenities>;
      };

  export type PriceResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type TagsResolver =
    | ((
        parent: Place,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | Promise<string[]>)
    | {
        fragment: string;
        resolve: (
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    shortDescription:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    description:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    numBeds:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    amenities:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Amenities | Promise<Amenities>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Amenities | Promise<Amenities>;
        };

    price:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    tags:
      | ((
          parent: Place,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>)
      | {
          fragment: string;
          resolve: (
            parent: Place,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | Promise<string[]>;
        };
  }
}

export namespace AmenitiesResolvers {
  export const defaultResolvers = {
    elevator: (parent: Amenities) => parent.elevator,
    petsAllowed: (parent: Amenities) => parent.petsAllowed,
    internet: (parent: Amenities) => parent.internet,
    kitchen: (parent: Amenities) => parent.kitchen,
    wirelessInternet: (parent: Amenities) => parent.wirelessInternet,
    familyKidFriendly: (parent: Amenities) => parent.familyKidFriendly,
    freeParkingOnPremises: (parent: Amenities) => parent.freeParkingOnPremises,
    hotTub: (parent: Amenities) => parent.hotTub,
    pool: (parent: Amenities) => parent.pool,
    smokingAllowed: (parent: Amenities) => parent.smokingAllowed,
    wheelchairAccessible: (parent: Amenities) => parent.wheelchairAccessible,
    breakfast: (parent: Amenities) => parent.breakfast,
    cableTv: (parent: Amenities) => parent.cableTv,
    suitableForEvents: (parent: Amenities) => parent.suitableForEvents,
    dryer: (parent: Amenities) => parent.dryer,
    washer: (parent: Amenities) => parent.washer,
    indoorFireplace: (parent: Amenities) => parent.indoorFireplace,
    tv: (parent: Amenities) => parent.tv,
    heating: (parent: Amenities) => parent.heating,
    hangers: (parent: Amenities) => parent.hangers,
    iron: (parent: Amenities) => parent.iron,
    hairDryer: (parent: Amenities) => parent.hairDryer,
    doorman: (parent: Amenities) => parent.doorman,
    paidParkingOffPremises: (parent: Amenities) =>
      parent.paidParkingOffPremises,
    freeParkingOnStreet: (parent: Amenities) => parent.freeParkingOnStreet,
    gym: (parent: Amenities) => parent.gym,
    airConditioning: (parent: Amenities) => parent.airConditioning,
    shampoo: (parent: Amenities) => parent.shampoo,
    essentials: (parent: Amenities) => parent.essentials,
    laptopFriendlyWorkspace: (parent: Amenities) =>
      parent.laptopFriendlyWorkspace,
    privateEntrance: (parent: Amenities) => parent.privateEntrance,
    buzzerWirelessIntercom: (parent: Amenities) =>
      parent.buzzerWirelessIntercom,
    babyBath: (parent: Amenities) => parent.babyBath,
    babyMonitor: (parent: Amenities) => parent.babyMonitor,
    babysitterRecommendations: (parent: Amenities) =>
      parent.babysitterRecommendations,
    bathtub: (parent: Amenities) => parent.bathtub,
    changingTable: (parent: Amenities) => parent.changingTable,
    childrensBooksAndToys: (parent: Amenities) => parent.childrensBooksAndToys,
    childrensDinnerware: (parent: Amenities) => parent.childrensDinnerware,
    crib: (parent: Amenities) => parent.crib
  };

  export type ElevatorResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type PetsAllowedResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type InternetResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type KitchenResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type WirelessInternetResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type FamilyKidFriendlyResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type FreeParkingOnPremisesResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HotTubResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type PoolResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type SmokingAllowedResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type WheelchairAccessibleResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BreakfastResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type CableTvResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type SuitableForEventsResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type DryerResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type WasherResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type IndoorFireplaceResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type TvResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HeatingResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HangersResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type IronResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HairDryerResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type DoormanResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type PaidParkingOffPremisesResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type FreeParkingOnStreetResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type GymResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type AirConditioningResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ShampooResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type EssentialsResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type LaptopFriendlyWorkspaceResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type PrivateEntranceResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BuzzerWirelessIntercomResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BabyBathResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BabyMonitorResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BabysitterRecommendationsResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type BathtubResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ChangingTableResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ChildrensBooksAndToysResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ChildrensDinnerwareResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type CribResolver =
    | ((
        parent: Amenities,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    elevator:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    petsAllowed:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    internet:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    kitchen:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    wirelessInternet:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    familyKidFriendly:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    freeParkingOnPremises:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hotTub:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    pool:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    smokingAllowed:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    wheelchairAccessible:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    breakfast:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    cableTv:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    suitableForEvents:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    dryer:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    washer:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    indoorFireplace:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    tv:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    heating:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hangers:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    iron:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hairDryer:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    doorman:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    paidParkingOffPremises:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    freeParkingOnStreet:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    gym:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    airConditioning:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    shampoo:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    essentials:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    laptopFriendlyWorkspace:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    privateEntrance:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    buzzerWirelessIntercom:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    babyBath:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    babyMonitor:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    babysitterRecommendations:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    bathtub:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    changingTable:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    childrensBooksAndToys:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    childrensDinnerware:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    crib:
      | ((
          parent: Amenities,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Amenities,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace ForgotPasswordChangeResultResolvers {
  export const defaultResolvers = {
    errors: (parent: ForgotPasswordChangeResult) => parent.errors
  };

  export type ErrorsResolver =
    | ((
        parent: ForgotPasswordChangeResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthenticationError[] | null | Promise<AuthenticationError[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: ForgotPasswordChangeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>;
      };

  export interface Type {
    errors:
      | ((
          parent: ForgotPasswordChangeResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AuthenticationError[]
          | null
          | Promise<AuthenticationError[] | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: ForgotPasswordChangeResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AuthenticationError[]
            | null
            | Promise<AuthenticationError[] | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Media: MediaResolvers.Type;
  MockUser: MockUserResolvers.Type;
  Mutation: MutationResolvers.Type;
  RegisterResult: RegisterResultResolvers.Type;
  AuthenticationError: AuthenticationErrorResolvers.Type;
  LoginResult: LoginResultResolvers.Type;
  UpdateMeResult: UpdateMeResultResolvers.Type;
  UpdateMeMediaResult: UpdateMeMediaResultResolvers.Type;
  CreatePlaceResult: CreatePlaceResultResolvers.Type;
  Place: PlaceResolvers.Type;
  Amenities: AmenitiesResolvers.Type;
  ForgotPasswordChangeResult: ForgotPasswordChangeResultResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
