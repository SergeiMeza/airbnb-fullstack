# import * from "./airbnb-service/generated/airbnb-prisma.graphql"

scalar Upload

type User {
  email: String!
  media: Media
  firstName: String
  lastName: String
  birthdate: DateTime
}

type AuthenticationError {
  path: String!
  message: String!
}

type Media {
  mimetype: String!
  url: String!
}

type Place {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortDescription: String!
  description: String!
  numBeds: Int!
  amenities: Amenities!
  price: Int!
  tags: [String!]!
}

type Amenities {
  elevator: Boolean!
  petsAllowed: Boolean!
  internet: Boolean!
  kitchen: Boolean!
  wirelessInternet: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  hotTub: Boolean!
  pool: Boolean!
  smokingAllowed: Boolean!
  wheelchairAccessible: Boolean!
  breakfast: Boolean!
  cableTv: Boolean!
  suitableForEvents: Boolean!
  dryer: Boolean!
  washer: Boolean!
  indoorFireplace: Boolean!
  tv: Boolean!
  heating: Boolean!
  hangers: Boolean!
  iron: Boolean!
  hairDryer: Boolean!
  doorman: Boolean!
  paidParkingOffPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  airConditioning: Boolean!
  shampoo: Boolean!
  essentials: Boolean!
  laptopFriendlyWorkspace: Boolean!
  privateEntrance: Boolean!
  buzzerWirelessIntercom: Boolean!
  babyBath: Boolean!
  babyMonitor: Boolean!
  babysitterRecommendations: Boolean!
  bathtub: Boolean!
  changingTable: Boolean!
  childrensBooksAndToys: Boolean!
  childrensDinnerware: Boolean!
  crib: Boolean!
}

type Query {
  me: User
}

type Mutation {
  #
  # AUTHENTICATION
  #
  register(email: String!, password: String!): RegisterResult!
  login(email: String!, password: String!): LoginResult!
  sendForgotPasswordEmail(email: String!): Boolean
  forgotPasswordChange: [AuthenticationError!]
  logout: Boolean

  #
  # USER INFO
  #
  updateMe(
    firstName: String
    lastName: String
    birthdate: DateTime
  ): UpdateMeResult!
  updateMeMedia(media: Upload!): UpdateMeMediaResult!

  createPlace(input: CreatePlaceInput!): CreatePlaceResult!
}

type RegisterResult {
  me: User
  token: String
  errors: [AuthenticationError!]
}

type LoginResult {
  me: User
  token: String
  errors: [AuthenticationError!]
}

type ForgotPasswordChangeResult {
  errors: [AuthenticationError!]
}

type UpdateMeMediaResult {
  me: User!
  token: String!
}

type UpdateMeResult {
  me: User!
  token: String!
}

input CreatePlaceInput {
  name: String!
  shortDescription: String!
  description: String!
  numBeds: Int!
  price: Int!
  tags: [String!]!
  amenities: Amenities!
}

type CreatePlaceResult {
  place: Place!
}
